// Get API responses from a local storage.
function get_api_response() {
  chrome.storage.local.get(['res_malware_details'], function (result) {
    const resData = result.res_malware_details;

    console.log("[LOG] " + resData.value + "'s data have got from storage.");
    console.log(resData);

    replace_html(resData);
  });
  return;
};

function replace_html(resData) {
  let replaceText = '<h2>' + resData.common_name;
  replaceText += '<font size="-2"> (<a href="https://malpedia.caad.fkie.fraunhofer.de/family/' + query + '">' + strOpenMalpedia + '</a>)</font>' + '</h2>';

  if ("alt_names" in resData) {

    if (resData.alt_names.length == 0) {
    }
    else {
      replaceText += '<h3>' + strAltNames + '</h3>';
      replaceText += '<div style="margin-left: 20px">';

      for (let i = 0; i < resData.alt_names.length; i++) {
        replaceText += resData.alt_names[i] + ' , ';
      }

    }
    replaceText += '</div>';
  }

  if ("attribution" in resData) {

    if (resData.attribution.length == 0) {
    }
    else {
      replaceText += '<h3>' + strActors + '<font size="-2"> (' + strLinkToExternalPage + ')</font></h3>';
      replaceText += '<div style="margin-left: 20px">';

      for (let i = 0; i < resData.attribution.length; i++) {
        replaceText += '<a href="https://malpedia.caad.fkie.fraunhofer.de/actor/';
        let malstr = resData.attribution[i].replace(/ /g, '_');
        malstr = malstr.toLowerCase();
        replaceText += malstr + '" target="_blank" rel="noopener noreferrer">'
        replaceText += resData.attribution[i] + '</a> , ';
      }
    }
    replaceText += '</div>';
  }

  if ("description" in resData) {
    replaceText += '<h3>' + strDescription + '</h3>';
    const descriptionStr = resData.description.replace(/\r?\n/g, '<br>')
    replaceText += '<div style="margin-left: 20px">' + descriptionStr + '</div>';
  }

  if ("notes" in resData) {

    if (resData.notes.length == 0) {
    }
    else {
      replaceText += '<h3>' + strNotes + '</h3>';
      replaceText += '<div style="margin-left: 20px">';
      replaceText += resData.notes;
      replaceText = replaceText + '</div>';
    }
  };

  if ("urls" in resData) {

    if (resData.urls.length == 0) {
    }
    else {
      replaceText += '<h3>' + strReferences + '<font size="-2"> (' + strLinkToExternalPage + ')</font></h3>';
      replaceText += '<div style="margin-left: 20px">';

      for (let i = 0; i < resData.urls.length; i++) {
        replaceText += '<a href="' + resData.urls[i] + '" target="_blank" rel="noopener noreferrer">' + resData.urls[i] + '</a><br>';
      }

    }
    replaceText = replaceText + '</div>';
  }

  elm = document.getElementById('result_body');
  elm.innerHTML = replaceText;
  console.log(("[LOG] Malware details report creation complete!"))
};

function message_to_background(query) {
  chrome.runtime.sendMessage({
    mode: "malware_report",
    query: query,
  }, function (response) {
    console.log('[LOG] ' + response + 'is OK');

    // Check storage values every 1 second, and if values are set, run getApi.
    let count = 0;
    const countUp = () => {
      console.log('Count: ' + count++);
    }

    const intervalId = setInterval(function () {
      countUp();

      // Check flag.
      chrome.storage.local.get(['flg'], function (result) {

        if (result.flg == 'ok') {
          console.log('[LOG] Data fetching OK.');
          clearInterval(intervalId);
          get_api_response()
        }

      });

      if (count > 10) {
        console.log('[LOG] Timeout.');
        alert(strTimeout);
        clearInterval(intervalId);
      };

    }, 1000);

  });
};


// Main process when open html.
const query = document.location.search.substring(1);
console.log('[LOG] Page query=' + query);

// Get localization text.
const strTimeout = chrome.i18n.getMessage('global_timeout')
const strTitle = chrome.i18n.getMessage('malware_report_str_title');
const strOpenMalpedia = chrome.i18n.getMessage('malware_report_str_open_malpedia');
const strAltNames = chrome.i18n.getMessage('malware_report_str_alt_names');
const strActors = chrome.i18n.getMessage('malware_report_str_actors');
const strLinkToExternalPage = chrome.i18n.getMessage('malware_report_str_external_link');
const strDescription = chrome.i18n.getMessage('malware_report_str_description');
const strNotes = chrome.i18n.getMessage('malware_report_str_notes');
const strReferences = chrome.i18n.getMessage('malware_report_str_references');

// Localize a page title.
let elm = document.getElementById('str_title');
elm.innerHTML = strTitle;

message_to_background(query);